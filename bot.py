# ------------ bot.py ---------------
import os, threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, MessageHandler, filters,
                          ConversationHandler, CallbackQueryHandler, CallbackContext)
from flask import Flask     # –¥–ª—è –Ω–µ–¥–æ—Ä–æ–≥–æ–≥–æ/free –ø–ª–∞–Ω–∞ Render

TOKEN   = os.getenv('TOKEN')          # –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω –≤ Render
CHANNEL = '@kvartirka61'              # –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π

PHOTO, TITLE, DIST, PRICE, CONTACT, DESC, CONFIRM = range(7)

def start(update: Update, ctx: CallbackContext):
    update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")
    return PHOTO

def got_photo(update: Update, ctx: CallbackContext):
    ctx.user_data['photo'] = update.message.photo[-1].file_id
    update.message.reply_text("–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä.: 2‚Äë–∫, 54 –º¬≤, –ñ–ë–ò)")
    return TITLE

def got_title(update: Update, ctx: CallbackContext):
    ctx.user_data['title'] = update.message.text
    update.message.reply_text("–†–∞–π–æ–Ω / –ú–µ—Ç—Ä–æ?")
    return DIST

def got_dist(update: Update, ctx: CallbackContext):
    ctx.user_data['dist'] = update.message.text
    update.message.reply_text("–¶–µ–Ω–∞?")
    return PRICE

def got_price(update: Update, ctx: CallbackContext):
    ctx.user_data['price'] = update.message.text
    update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç (@–Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)")
    return CONTACT

def got_contact(update: Update, ctx: CallbackContext):
    ctx.user_data['contact'] = update.message.text
    update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ ¬´‚Äë¬ª –µ—Å–ª–∏ –Ω–µ—Ç)")
    return DESC

def got_desc(update: Update, ctx: CallbackContext):
    ctx.user_data['desc'] = update.message.text
    txt = (f"üè† <b>{ctx.user_data['title']}</b>\n"
           f"üìç {ctx.user_data['dist']}\n"
           f"üí∞ <b>{ctx.user_data['price']} ‚ÇΩ</b>\n"
           f"üìû {ctx.user_data['contact']}\n\n"
           f"{ctx.user_data['desc']}")
    kb = [[InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='yes'),
           InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='no')]]
    update.message.reply_photo(ctx.user_data['photo'], caption=txt,
                               parse_mode='HTML',
                               reply_markup=InlineKeyboardMarkup(kb))
    return CONFIRM

def confirm(update: Update, ctx: CallbackContext):
    q = update.callback_query
    q.answer()
    if q.data == 'yes':
        ctx.bot.send_photo(CHANNEL, ctx.user_data['photo'],
                           caption=q.message.caption, parse_mode='HTML')
        q.edit_message_caption("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
        return ConversationHandler.END
    else:
        q.edit_message_text("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")
        return PHOTO

def cancel(update: Update, ctx: CallbackContext):
    update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    application = Application.builder().token("7616498446:AAGAlSXh9F0uQq2nfBc-jI15be5chdQPSXA").build()
    conv = ConversationHandler(
        entry_points=[CommandHandler('new', start)],
        states={
            PHOTO:  [MessageHandler(filters.PHOTO, got_photo)],
            TITLE:  [MessageHandler(filters.TEXT, got_title)],
            DIST:   [MessageHandler(filters.TEXT, got_dist)],
            PRICE:  [MessageHandler(filters.TEXT, got_price)],
            CONTACT:[MessageHandler(filters.TEXT, got_contact)],
            DESC:   [MessageHandler(filters.TEXT, got_desc)],
            CONFIRM:[CallbackQueryHandler(confirm)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv)

    # –º–∏–Ω–∏‚ÄëHTTP‚Äë—Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π Render –Ω–µ ¬´–∑–∞—Å—ã–ø–∞–ª¬ª
    flask_app = Flask(__name__)
    @flask_app.route('/')
    def root(): return 'ok', 200
    threading.Thread(target=lambda: flask_app.run(host='0.0.0.0',
                                                  port=int(os.getenv('PORT', 8000))),
                     daemon=True).start()

    application.run_polling()

if __name__ == '__main__':
    main()