# -*- coding: utf-8 -*-
"""
Telegram‚Äë–±–æ—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ @kvartirka61.
–°–æ–≤–º–µ—Å—Ç–∏–º —Å Flask 2.x / 3.x –∏ python‚Äëtelegram‚Äëbot 20.7.
–ó–∞–ø—É—Å–∫:
    python bot.py                       # –ª–æ–∫–∞–ª—å–Ω–æ
    gunicorn -w 1 -b 0.0.0.0:$PORT bot:app   # Render / Heroku
–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    TOKEN   ‚Äî —Ç–æ–∫–µ–Ω Telegram‚Äë–±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    CHANNEL ‚Äî id/username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–ø–æ‚Äë—É–º–æ–ª—á.  @kvartirka61)
"""

from __future__ import annotations

import asyncio
import logging
import os
import sys
import threading
from typing import Final, List

from flask import Flask, Response
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    InputMediaVideo,
    Update,
)
from telegram.constants import ChatMemberStatus, ParseMode
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN:   Final[str] = os.getenv("TOKEN", "")
CHANNEL: Final[str] = os.getenv("CHANNEL", "@kvartirka61")
PORT:    Final[int] = int(os.getenv("PORT", "10000"))

MAX_PHOTOS: Final[int] = 9
CONCURRENT_UPDATES: Final[int] = 32

if not TOKEN:
    print("‚ùå  –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!", file=sys.stderr)
    sys.exit(1)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(
    VIDEO,
    PHOTO_OPTIONAL,
    TYPE,
    DISTRICT,
    ADDRESS,
    ROOMS,
    LAND,
    FLOORS,
    AREA,
    PRICE,
    CONFIRM,
) = range(11)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def html_escape(text: str) -> str:
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

async def _is_subscribed(bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL, user_id)
        return member.status in (
            ChatMemberStatus.CREATOR,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.RESTRICTED,
        )
    except TelegramError as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: %s", e)
        return False

async def require_subscription(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> bool:
    if await _is_subscribed(ctx.bot, update.effective_user.id):
        return True
    link = CHANNEL if CHANNEL.startswith("@") else CHANNEL
    await update.effective_chat.send_message(
        f"üîí –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {link} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."
    )
    return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ú–ê–ù–î–´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not await require_subscription(update, ctx):
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "‚Ä¢ /new ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥\n"
        "‚Ä¢ /help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞\n"
        "‚Ä¢ /ping ‚Äî —Ç–µ—Å—Ç"
    )

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await cmd_start(update, ctx)

async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–¶–ï–ù–ê–†–ò–ô /new (Conversation) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def new_entry(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    if not await require_subscription(update, ctx):
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –í–ò–î–ï–û –æ–±—ä–µ–∫—Ç–∞")
    return VIDEO

async def step_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    video = update.effective_message.video or update.effective_message.document
    if not video:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return VIDEO
    ctx.user_data.clear()
    ctx.user_data["video"] = video.file_id
    ctx.user_data["photos"]: List[str] = []
    await update.message.reply_text(
        "–ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–æ 9 —à—Ç. –ö–æ–≥–¥–∞ —Ö–≤–∞—Ç–∏—Ç ‚Äî /done –∏–ª–∏ /skip."
    )
    return PHOTO_OPTIONAL

async def step_photo_collect(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    if len(ctx.user_data["photos"]) >= MAX_PHOTOS:
        await update.message.reply_text("–õ–∏–º–∏—Ç 9 —Ñ–æ—Ç–æ.")
        return PHOTO_OPTIONAL
    ctx.user_data["photos"].append(update.message.photo[-1].file_id)
    return PHOTO_OPTIONAL

async def photo_done(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üè¢ –ö–≤–∞—Ä—Ç–∏—Ä–∞", "–ö–≤–∞—Ä—Ç–∏—Ä–∞"),
          InlineKeyboardButton("üè° –î–æ–º", "–î–æ–º")]]
    )
    await update.message.reply_text("–í–∏–¥ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=kb)
    return TYPE

async def step_type(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    ctx.user_data["type"] = q.data
    await q.edit_message_text(f"–í–∏–¥: {q.data}")
    await q.message.reply_text("–†–∞–π–æ–Ω?")
    return DISTRICT

async def step_district(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ctx.user_data["district"] = update.message.text
    await update.message.reply_text("–ê–¥—Ä–µ—Å?")
    return ADDRESS

async def step_address(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ctx.user_data["address"] = update.message.text
    await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç?")
    return ROOMS

async def step_rooms(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ctx.user_data["rooms"] = update.message.text
    if ctx.user_data["type"] == "–î–æ–º":
        await update.message.reply_text("–†–∞–∑–º–µ—Ä —É—á–∞—Å—Ç–∫–∞ (—Å–æ—Ç.)?")
        return LAND
    await update.message.reply_text("–≠—Ç–∞–∂ / —ç—Ç–∞–∂–Ω–æ—Å—Ç—å (3/5)?")
    return FLOORS

async def step_land(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ctx.user_data["land"] = update.message.text
    await update.message.reply_text("–≠—Ç–∞–∂ / —ç—Ç–∞–∂–Ω–æ—Å—Ç—å (1/2)?")
    return FLOORS

async def step_floors(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ctx.user_data["floors"] = update.message.text
    await update.message.reply_text("–ü–ª–æ—â–∞–¥—å, –º¬≤?")
    return AREA

async def step_area(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ctx.user_data["area"] = update.message.text
    await update.message.reply_text("–¶–µ–Ω–∞, ‚ÇΩ?")
    return PRICE

async def step_price(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    ctx.user_data["price"] = update.message.text
    ud = ctx.user_data
    lines = [
        f"üè† <b>{html_escape(ud['type'])}</b>",
        f"üìç {html_escape(ud['district'])}",
        f"üìå {html_escape(ud['address'])}",
        f"üõè {html_escape(ud['rooms'])} –∫–æ–º–Ω.",
    ]
    if ud["type"] == "–î–æ–º":
        lines.append(f"üå≥ –£—á–∞—Å—Ç–æ–∫: {html_escape(ud.get('land', '-'))} —Å–æ—Ç.")
    lines.extend(
        [
            f"üè¢ –≠—Ç–∞–∂/—ç—Ç–∞–∂–Ω.: {html_escape(ud['floors'])}",
            f"üìê –ü–ª–æ—â–∞–¥—å: {html_escape(ud['area'])} –º¬≤",
            f"üí∞ <b>{html_escape(ud['price'])} ‚ÇΩ</b>",
        ]
    )
    ud["caption"] = "\n".join(lines)
    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", "yes"),
          InlineKeyboardButton("üîÑ –ó–∞–Ω–æ–≤–æ", "redo")]]
    )
    await update.message.reply_video(ud["video"], caption=ud["caption"], reply_markup=kb)
    return CONFIRM

async def step_confirm(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    q = update.callback_query
    await q.answer()
    if q.data == "yes":
        if not await _is_subscribed(ctx.bot, q.from_user.id):
            await q.edit_message_caption("üîí –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.")
            return ConversationHandler.END
        ud = ctx.user_data
        try:
            if ud["photos"]:
                media = [InputMediaVideo(ud["video"], caption=ud["caption"])]
                media += [InputMediaPhoto(pid) for pid in ud["photos"]]
                await ctx.bot.send_media_group(CHANNEL, media)
            else:
                await ctx.bot.send_video(CHANNEL, ud["video"], caption=ud["caption"])
            await q.edit_message_caption("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
        except TelegramError as e:
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %s", e)
            await q.edit_message_caption("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
        return ConversationHandler.END
    await q.edit_message_text("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ.")
    return VIDEO

async def step_cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.")
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–ë–©–ò–• –û–®–ò–ë–û–ö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Exception while handling an update: %s", context.error)
    if isinstance(update, Update) and update.effective_chat:
        await context.bot.send_message(
            update.effective_chat.id, "üòî –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TELEGRAM APPLICATION ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
application = (
    Application.builder()
    .token(TOKEN)
    .defaults(dict(parse_mode=ParseMode.HTML))
    .concurrent_updates(CONCURRENT_UPDATES)
    .build()
)

application.add_error_handler(error_handler)
application.add_handler(CommandHandler(["start", "help"], cmd_start))
application.add_handler(CommandHandler("ping", cmd_ping))

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("new", new_entry)],
    states={
        VIDEO: [
            MessageHandler(
                filters.VIDEO | (filters.Document.VIDEO & ~filters.COMMAND),
                step_video,
            )
        ],
        PHOTO_OPTIONAL: [
            MessageHandler(filters.PHOTO, step_photo_collect),
            CommandHandler(["done", "skip"], photo_done),
        ],
        TYPE:     [CallbackQueryHandler(step_type)],
        DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_district)],
        ADDRESS:  [MessageHandler(filters.TEXT & ~filters.COMMAND, step_address)],
        ROOMS:    [MessageHandler(filters.TEXT & ~filters.COMMAND, step_rooms)],
        LAND:     [MessageHandler(filters.TEXT & ~filters.COMMAND, step_land)],
        FLOORS:   [MessageHandler(filters.TEXT & ~filters.COMMAND, step_floors)],
        AREA:     [MessageHandler(filters.TEXT & ~filters.COMMAND, step_area)],
        PRICE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, step_price)],
        CONFIRM:  [CallbackQueryHandler(step_confirm)],
    },
    fallbacks=[CommandHandler("cancel", step_cancel)],
    per_user=True,
)

application.add_handler(conv_handler)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Flask + –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = Flask(__name__)

@app.get("/")
def health() -> Response:
    return Response("ok", 200)

def run_bot() -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç polling‚Äë–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    –°–æ–∑–¥–∞—ë–º —Å–≤–æ–π event‚Äëloop, —á—Ç–æ–±—ã avoid ¬´There is no current event loop¬ª.
    """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    log.info("üì°  Bot polling started (thread)")
    application.run_polling(
        allowed_updates=[
            "message",
            "edited_message",
            "callback_query",
            "my_chat_member",
        ],
        close_loop=False,
        drop_pending_updates=True,
    )

# —Å—Ç–∞—Ä—Ç—É–µ–º –ø–æ—Ç–æ–∫‚Äë–±–æ—Ç —Å—Ä–∞–∑—É
threading.Thread(target=run_bot, daemon=True, name="run_bot").start()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (python bot.py) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    app.run("0.0.0.0", PORT, use_reloader=False)