# -*- coding: utf-8 -*-
"""
Flask + Telegram‚Äë–±–æ—Ç (polling).  PTB 20.7

ENV‚Äë–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TOKEN   ‚Äì —Ç–æ–∫–µ–Ω –±–æ—Ç–∞          (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
CHANNEL ‚Äì @username / id –∫–∞–Ω–∞–ª–∞ (–ø–æ‚Äë—É–º–æ–ª—á–∞–Ω–∏—é @kvartirka61)
PORT    ‚Äì –ø–æ—Ä—Ç Flask (Render –ø–µ—Ä–µ–¥–∞—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
"""

from __future__ import annotations

import logging
import os
from typing import Final, List

from flask import Flask, Response
from httpx import Limits
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      InputMediaPhoto, InputMediaVideo, Update)
from telegram.constants import ChatMemberStatus, ParseMode
from telegram.error import TelegramError
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ConversationHandler, ContextTypes,
                          Defaults, MessageHandler, filters)
from telegram.request import HTTPXRequest

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN:   Final[str] = os.getenv("TOKEN", "")
CHANNEL: Final[str] = os.getenv("CHANNEL", "@kvartirka61")  # ‚Üê –∫–∞–Ω–∞–ª –ø–æ‚Äë—É–º–æ–ª—á–∞–Ω–∏—é
PORT:    Final[int] = int(os.getenv("PORT", "10000"))

if not TOKEN:
    raise RuntimeError("–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

MAX_PHOTOS: Final[int] = 9
CONCURRENT_UPDATES: Final[int] = 32

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ConversationHandler: —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(
    VIDEO, PHOTO, TYPE, DISTRICT, ADDRESS,
    ROOMS, LAND, FLOORS, AREA, PRICE, CONFIRM,
) = range(11)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def html(text: str) -> str:
    return (text.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;"))

async def _is_subscribed(bot, user_id: int) -> bool:
    try:
        m = await bot.get_chat_member(CHANNEL, user_id)
        return m.status in {
            ChatMemberStatus.CREATOR,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.RESTRICTED,
        }
    except TelegramError:
        return False

async def require_sub(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> bool:
    if await _is_subscribed(ctx.bot, update.effective_user.id):
        return True
    link = CHANNEL if CHANNEL.startswith("@") else f"https://t.me/{CHANNEL}"
    await update.effective_chat.send_message(
        f"üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {link}"
    )
    return False

def build_ad(data: dict) -> str:
    parts = [
        f"<b>{html(data['type'])}</b>",
        f"üèò <b>–†–∞–π–æ–Ω:</b> {html(data['district'])}",
        f"üó∫ <b>–ê–¥—Ä–µ—Å:</b> {html(data['address'])}",
        f"üö™ <b>–ö–æ–º–Ω–∞—Ç:</b> {html(data['rooms'])}",
        f"üå≥ <b>–£—á–∞—Å—Ç–æ–∫:</b> {html(data['land'])}",
        f"üè¢ <b>–≠—Ç–∞–∂–µ–π:</b> {html(data['floors'])}",
        f"üìê <b>–ü–ª–æ—â–∞–¥—å:</b> {html(data['area'])}",
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {html(data['price'])}",
        "\nüìû –ü–∏—Å–∞—Ç—å –≤ –õ–° –ø—Ä–æ–¥–∞–≤—Ü—É",
    ]
    return "\n".join(parts)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not await require_sub(update, ctx):
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "/new ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏"
    )

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await cmd_start(update, ctx)

async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Conversation: /new ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_new(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not await require_sub(update, ctx):
        return ConversationHandler.END
    ctx.user_data.clear()
    await update.message.reply_text(
        "–®–∞–≥ 1/10\n–ü—Ä–∏—à–ª–∏—Ç–µ –í–ò–î–ï–û –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ /skip",
        parse_mode='HTML'
    )
    return VIDEO

async def step_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["video"] = update.message.video.file_id
    ctx.user_data["photos"]: List[str] = []
    await update.message.reply_text(
        f"–®–∞–≥ 2/10\n–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ {MAX_PHOTOS} —Ñ–æ—Ç–æ "
        "(/done –∫–æ–≥–¥–∞ —Ö–≤–∞—Ç–∏—Ç, /skip ‚Äî –±–µ–∑ —Ñ–æ—Ç–æ)"
    )
    return PHOTO

async def skip_video(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["video"] = None
    ctx.user_data["photos"]: List[str] = []
    await update.message.reply_text(
        f"–®–∞–≥ 2/10\n–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ {MAX_PHOTOS} —Ñ–æ—Ç–æ "
        "(/done –∫–æ–≥–¥–∞ —Ö–≤–∞—Ç–∏—Ç, /skip ‚Äî –±–µ–∑ —Ñ–æ—Ç–æ)"
    )
    return PHOTO

async def step_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    photos: List[str] = ctx.user_data["photos"]
    if len(photos) >= MAX_PHOTOS:
        await update.message.reply_text(f"–£–∂–µ {MAX_PHOTOS} —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done")
        return PHOTO
    photos.append(update.message.photo[-1].file_id)
    return PHOTO

async def photo_done(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–®–∞–≥ 3/10\n–í–≤–µ–¥–∏—Ç–µ <b>—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞</b> (–∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º‚Ä¶)",
        parse_mode='HTML'
    )
    return TYPE

async def step_type(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["type"] = update.message.text.strip()
    await update.message.reply_text("–®–∞–≥ 4/10\n–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω:")
    return DISTRICT

async def step_district(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["district"] = update.message.text.strip()
    await update.message.reply_text("–®–∞–≥ 5/10\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    return ADDRESS

async def step_address(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["address"] = update.message.text.strip()
    await update.message.reply_text("–®–∞–≥ 6/10\n–°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?")
    return ROOMS

async def step_rooms(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["rooms"] = update.message.text.strip()
    await update.message.reply_text("–®–∞–≥ 7/10\n–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞ (–º¬≤) –∏–ª–∏ '-' :")
    return LAND

async def step_land(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["land"] = update.message.text.strip()
    await update.message.reply_text("–®–∞–≥ 8/10\n–°–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π?")
    return FLOORS

async def step_floors(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["floors"] = update.message.text.strip()
    await update.message.reply_text("–®–∞–≥ 9/10\n–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤):")
    return AREA

async def step_area(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["area"] = update.message.text.strip()
    await update.message.reply_text("–®–∞–≥ 10/10\n–¶–µ–Ω–∞:")
    return PRICE

async def step_price(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["price"] = update.message.text.strip()

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="ok"),
         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞",      callback_data="cancel")],
    ])
    await update.message.reply_text(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=kb,
        disable_web_page_preview=True
    )
    await update.message.reply_text(build_ad(ctx.user_data), parse_mode='HTML')
    return CONFIRM

async def step_confirm(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "cancel":
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

    data = ctx.user_data
    text = build_ad(data)

    if data["video"]:
        await ctx.bot.send_video(CHANNEL, data["video"],
                                 caption=text, parse_mode='HTML')
    elif data["photos"]:
        media = [InputMediaPhoto(pid) for pid in data["photos"][:10]]
        media[0].caption = text
        media[0].parse_mode = 'HTML'
        await ctx.bot.send_media_group(CHANNEL, media)
    else:
        await ctx.bot.send_message(CHANNEL, text, parse_mode='HTML')

    await query.edit_message_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
    return ConversationHandler.END

async def step_cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.")
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Application / Handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
request_cfg = HTTPXRequest(
    connect_timeout=15,
    read_timeout=15,
    pool_limits=Limits(max_connections=20, max_keepalive_connections=20),
    max_retries=1,
)

application = (
    ApplicationBuilder()
    .token(TOKEN)
    .defaults(Defaults(parse_mode=ParseMode.HTML))
    .concurrent_updates(CONCURRENT_UPDATES)
    .request(request_cfg)
    .build()
)

application.add_handler(CommandHandler(["start", "help"], cmd_start))
application.add_handler(CommandHandler("ping", cmd_ping))

conv = ConversationHandler(
    entry_points=[CommandHandler("new", cmd_new)],
    states={
        VIDEO:    [MessageHandler(filters.VIDEO, step_video),
                   CommandHandler("skip", skip_video)],
        PHOTO:    [MessageHandler(filters.PHOTO, step_photo),
                   CommandHandler("done", photo_done),
                   CommandHandler("skip", photo_done)],
        TYPE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, step_type)],
        DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_district)],
        ADDRESS:  [MessageHandler(filters.TEXT & ~filters.COMMAND, step_address)],
        ROOMS:    [MessageHandler(filters.TEXT & ~filters.COMMAND, step_rooms)],
        LAND:     [MessageHandler(filters.TEXT & ~filters.COMMAND, step_land)],
        FLOORS:   [MessageHandler(filters.TEXT & ~filters.COMMAND, step_floors)],
        AREA:     [MessageHandler(filters.TEXT & ~filters.COMMAND, step_area)],
        PRICE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, step_price)],
        CONFIRM:  [CallbackQueryHandler(step_confirm)],
    },
    fallbacks=[CommandHandler("cancel", step_cancel)],
    name="publish_ad",
    persistent=False,
)
application.add_handler(conv)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Flask WSGI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
flask_app = Flask(__name__)

@flask_app.route("/", methods=["GET", "HEAD"])
def index() -> Response:
    return Response("OK", 200)

if __name__ == "__main__":
    application.run_polling()