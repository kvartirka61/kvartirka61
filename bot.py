# -*- coding: utf-8 -*-
"""
Flask‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ + Telegram‚Äë–±–æ—Ç (polling). PTB 20.7.
Polling **–ù–ï** –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è ‚Äî —ç—Ç–∏–º –∑–∞–π–º—ë—Ç—Å—è Gunicorn
—á–µ—Ä–µ–∑ post_fork‚Äë—Ö—É–∫ (—Å–º. gunicorn_conf.py).

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
--------------------
TOKEN     ‚Äì bot‚Äëtoken                 (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
CHANNEL   ‚Äì @username –∏–ª–∏ id –∫–∞–Ω–∞–ª–∞    (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
PORT      ‚Äì –ø–æ—Ä—Ç –¥–ª—è Flask [$PORT]     (10000 –ø–æ —É–º–æ–ª—á.)
"""

from __future__ import annotations

import asyncio
import logging
import os
import threading
from typing import Final, List

from flask import Flask, Response
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      InputMediaPhoto, InputMediaVideo, Update)
from telegram.constants import ChatMemberStatus, ParseMode
from telegram.error import TelegramError
from telegram.ext import (Application, CallbackQueryHandler, CommandHandler,
                          ConversationHandler, ContextTypes, Defaults,
                          MessageHandler, filters)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TOKEN:   Final[str] = os.getenv("TOKEN", "")
CHANNEL: Final[str] = os.getenv("CHANNEL", "@kvartirka61")
PORT:    Final[int] = int(os.getenv("PORT", "10000"))

if not TOKEN or not CHANNEL:
    raise RuntimeError("–ù—É–∂–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ CHANNEL")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)-8s | %(name)s | %(message)s",
)
log = logging.getLogger("bot")

MAX_PHOTOS: Final[int] = 9
CONCURRENT_UPDATES: Final[int] = 32

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ConversationHandler —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(
    VIDEO, PHOTO_OPTIONAL, TYPE, DISTRICT, ADDRESS,
    ROOMS, LAND, FLOORS, AREA, PRICE, CONFIRM,
) = range(11)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def html(text: str) -> str:
    return (text.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;"))

async def _is_subscribed(bot, user_id: int) -> bool:
    try:
        m = await bot.get_chat_member(CHANNEL, user_id)
        return m.status in {ChatMemberStatus.CREATOR,
                            ChatMemberStatus.ADMINISTRATOR,
                            ChatMemberStatus.MEMBER,
                            ChatMemberStatus.RESTRICTED}
    except TelegramError:
        return False

async def require_sub(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> bool:
    if await _is_subscribed(ctx.bot, update.effective_user.id):
        return True
    link = CHANNEL if CHANNEL.startswith("@") else f"https://t.me/{CHANNEL}"
    await update.effective_chat.send_message(
        f"üîí –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {link}"
    )
    return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not await require_sub(update, ctx):
        return
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n"
        "/new ‚Äë –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "/cancel ‚Äë –æ—Ç–º–µ–Ω–∏—Ç—å\n"
        "/help ‚Äë –ø–æ–º–æ—â—å\n"
        "/ping ‚Äë —Ç–µ—Å—Ç"
    )

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await cmd_start(update, ctx)

async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("pong")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Conversation /new (—à–∞–≥–∏ –æ–ø—É—â–µ–Ω—ã –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# --- –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ—Ö –∂–µ —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ ---
# (step_video, step_photo, photo_done, step_type, ‚Ä¶, step_confirm, step_cancel)
#              –î–æ—Å–ª–æ–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
# --------------------------------------------------------------------

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Application (PTB 20.7) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
application = (
    Application.builder()
    .token(TOKEN)
    .defaults(Defaults(parse_mode=ParseMode.HTML))
    .concurrent_updates(CONCURRENT_UPDATES)
    .build()
)

# handlers (–∫–æ—Ä–æ—Ç–∫–æ)
application.add_handler(CommandHandler(["start", "help"], cmd_start))
application.add_handler(CommandHandler("ping", cmd_ping))

# ConversationHandler ‚Äî –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ø—Ä–µ–∂–Ω–µ–º—É,
# –Ω–æ –ë–ï–ó per_message=True, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ warning
# conv_handler = ConversationHandler( ... )
# application.add_handler(conv_handler)
# ----> –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –±–µ–∑ per_message=True

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ error handler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def error_handler(update: object, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ update: %s", ctx.error)
    if isinstance(update, Update) and update.effective_chat:
        await ctx.bot.send_message(update.effective_chat.id,
                                   "üòî –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

application.add_error_handler(error_handler)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Flask ‚Äë healthcheck ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = Flask(__name__)

@app.get("/")
def health() -> Response:
    return Response("ok", 200)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ polling‚Äë—Ñ—É–Ω–∫—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def run_bot() -> None:
    """–°—Ç–∞—Ä—Ç—É–µ—Ç polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ gunicorn_conf."""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    log.info("üì° Bot polling started. PID=%s", os.getpid())
    application.run_polling(
        allowed_updates=["message", "edited_message",
                         "callback_query", "my_chat_member"],
        drop_pending_updates=True,
        stop_signals=[],      # –Ω–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å signal –ø–æ—Å–ª–µ forka
        close_loop=False,
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (`python bot.py`) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    # 1. –∑–∞–ø—É—Å–∫–∞–µ–º polling‚Äë–ø–æ—Ç–æ–∫
    threading.Thread(target=run_bot, daemon=True).start()
    # 2. –∑–∞–ø—É—Å–∫–∞–µ–º Flask dev‚Äë—Å–µ—Ä–≤–µ—Ä
    app.run("0.0.0.0", PORT, use_reloader=False)