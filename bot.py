# ---------- bot.py ----------
import os, threading
from flask import Flask
from telegram import (Update, InlineKeyboardButton,
                      InlineKeyboardMarkup)
from telegram.ext import (Application, CommandHandler, MessageHandler,
                          filters, ConversationHandler, CallbackQueryHandler,
                          ContextTypes)

# --- –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN   = os.getenv("TOKEN")                     # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
CHANNEL = os.getenv("CHANNEL", "@kvartirka61_bot")   # id –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º
PORT    = int(os.getenv("PORT", 10000))          # Render –ø–µ—Ä–µ–¥–∞—Å—Ç —Å–≤–æ–π

if not TOKEN:
    raise RuntimeError("–ù–µ—Ç TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# --- —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è /new ---
PHOTO, TITLE, DIST, PRICE, CONTACT, DESC, CONFIRM = range(7)

# ---------- —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ----------
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "‚Ä¢ /new ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ /cancel ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥\n"
        "‚Ä¢ /help ‚Äì –ø–æ–º–æ—â—å"
    )

async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

# ---------- —Å—Ü–µ–Ω–∞—Ä–∏–π ¬´–¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ¬ª ----------
async def step_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['photo'] = update.message.photo[-1].file_id
    await update.message.reply_text("–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä.: 2‚Äë–∫, 54 –º¬≤, –ü–∞–Ω–µ–ª—å)")
    return TITLE

async def step_title(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['title'] = update.message.text
    await update.message.reply_text("–†–∞–π–æ–Ω ?")
    return DIST

async def step_dist(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['dist'] = update.message.text
    await update.message.reply_text("–¶–µ–Ω–∞?")
    return PRICE

async def step_price(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['price'] = update.message.text
    await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç (@–Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)")
    return CONTACT

async def step_contact(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['contact'] = update.message.text
    await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ ¬´‚Äë¬ª –µ—Å–ª–∏ –Ω–µ—Ç)")
    return DESC

async def step_desc(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['desc'] = update.message.text
    caption = (
        f"üè† <b>{ctx.user_data['title']}</b>\n"
        f"üìç {ctx.user_data['dist']}\n"
        f"üí∞ <b>{ctx.user_data['price']} ‚ÇΩ</b>\n"
        f"üìû {ctx.user_data['contact']}\n\n"
        f"{ctx.user_data['desc']}"
    )
    kb = [[InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="yes"),
           InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å",     callback_data="no")]]
    await update.message.reply_photo(
        ctx.user_data['photo'],
        caption=caption,
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(kb)
    )
    return CONFIRM

async def step_confirm(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "yes":
        # –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await ctx.bot.send_photo(
            chat_id=CHANNEL,
            photo=ctx.user_data['photo'],
            caption=q.message.caption,
            parse_mode='HTML'
        )
        await q.edit_message_caption("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
        return ConversationHandler.END
    else:
        await q.edit_message_text("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")
        return PHOTO

async def step_cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ---------- —Å–æ–∑–¥–∞—ë–º Application ----------
application = Application.builder().token(TOKEN).build()

# –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler(["start", "help"], cmd_start))
application.add_handler(CommandHandler("ping", cmd_ping))

# conversation /new
conv = ConversationHandler(
    entry_points=[CommandHandler("new", lambda u, c: u.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞") or PHOTO)],
    states={
        PHOTO:   [MessageHandler(filters.PHOTO, step_photo)],
        TITLE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, step_title)],
        DIST:    [MessageHandler(filters.TEXT & ~filters.COMMAND, step_dist)],
        PRICE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, step_price)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_contact)],
        DESC:    [MessageHandler(filters.TEXT & ~filters.COMMAND, step_desc)],
        CONFIRM: [CallbackQueryHandler(step_confirm)],
    },
    fallbacks=[CommandHandler("cancel", step_cancel)],
    per_chat=False, per_user=True
)
application.add_handler(conv)

# ---------- Flask‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render ----------
app = Flask(__name__)

@app.route("/", methods=["GET", "HEAD"])
def index():
    return "ok", 200

# ---------- –∑–∞–ø—É—Å–∫ polling ----------
def run_bot():
    application.run_polling(close_loop=False)

# –∑–∞–ø—É—Å–∫–∞–µ–º polling –ø—Ä–∏ –ø–µ—Ä–≤–æ–º HTTP‚Äë–∑–∞–ø—Ä–æ—Å–µ (gunicorn‚Äë–≤–æ—Ä–∫–µ—Ä)
@app.before_first_request
def activate_bot():
    threading.Thread(target=run_bot, daemon=True).start()

# –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: python bot.py
if __name__ == "__main__":
    run_bot()
    app.run(host="0.0.0.0", port=PORT, use_reloader=False)