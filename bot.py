# ---------------- bot.py ----------------
import os
import threading
import logging

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, CallbackQueryHandler,
    ContextTypes,
)

# ---------------------------------------------------------------------------
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ---------------------------------------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------
# –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø
# ---------------------------------------------------------------------------
TOKEN   = os.getenv("TOKEN")                          # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
CHANNEL = os.getenv("CHANNEL", "@kvartirka61")        # id/—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
PORT    = int(os.getenv("PORT", 10000))               # Render –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–≤–æ–π

if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

# ---------------------------------------------------------------------------
# –°–û–°–¢–û–Ø–ù–ò–Ø ConversationHandler (/new)
# ---------------------------------------------------------------------------
PHOTO, TITLE, DIST, PRICE, CONTACT, DESC, CONFIRM = range(7)

# ---------------------------------------------------------------------------
# –°–õ–£–ñ–ï–ë–ù–´–ï –ö–û–ú–ê–ù–î–´
# ---------------------------------------------------------------------------
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n"
        "‚Ä¢ /new ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ /cancel ‚Äì –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥\n"
        "‚Ä¢ /help ‚Äì —Å–ø—Ä–∞–≤–∫–∞"
    )

async def cmd_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await cmd_start(update, ctx)

async def cmd_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("pong")

# ---------------------------------------------------------------------------
# –®–ê–ì–ò –°–¶–ï–ù–ê–†–ò–Ø /new
# ---------------------------------------------------------------------------
async def entry_new(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞")
    return PHOTO

async def step_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["photo"] = update.message.photo[-1].file_id
    await update.message.reply_text("–ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2‚Äë–∫, 54 –º¬≤, –ü–∞–Ω–µ–ª—å)")
    return TITLE

async def step_title(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["title"] = update.message.text
    await update.message.reply_text("–†–∞–π–æ–Ω?")
    return DIST

async def step_dist(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["dist"] = update.message.text
    await update.message.reply_text("–¶–µ–Ω–∞?")
    return PRICE

async def step_price(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["price"] = update.message.text
    await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç (@–Ω–∏–∫ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω)")
    return CONTACT

async def step_contact(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["contact"] = update.message.text
    await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ ¬´‚Äë¬ª –µ—Å–ª–∏ –Ω–µ—Ç)")
    return DESC

async def step_desc(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data["desc"] = update.message.text

    caption = (
        f"üè† <b>{ctx.user_data['title']}</b>\n"
        f"üìç {ctx.user_data['dist']}\n"
        f"üí∞ <b>{ctx.user_data['price']} ‚ÇΩ</b>\n"
        f"üìû {ctx.user_data['contact']}\n\n"
        f"{ctx.user_data['desc']}"
    )

    kb = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="yes"),
            InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å",     callback_data="no"),
        ]
    ]

    await update.message.reply_photo(
        ctx.user_data["photo"],
        caption=caption,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(kb),
    )
    return CONFIRM

async def step_confirm(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "yes":
        # –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await ctx.bot.send_photo(
            chat_id=CHANNEL,
            photo=ctx.user_data["photo"],
            caption=query.message.caption,
            parse_mode="HTML",
        )
        await query.edit_message_caption("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!")
        return ConversationHandler.END

    # –∏–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await query.edit_message_text("–ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")
    return PHOTO

async def step_cancel(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ---------------------------------------------------------------------------
# –°–û–ó–î–ê–ù–ò–ï Application –∏ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–ï–ù–î–õ–ï–†–û–í
# ---------------------------------------------------------------------------
application = Application.builder().token(TOKEN).build()

# –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler(["start", "help"], cmd_start))
application.add_handler(CommandHandler("ping", cmd_ping))

# conversation /new
conv = ConversationHandler(
    entry_points=[CommandHandler("new", entry_new)],
    states={
        PHOTO:   [MessageHandler(filters.PHOTO, step_photo)],
        TITLE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, step_title)],
        DIST:    [MessageHandler(filters.TEXT & ~filters.COMMAND, step_dist)],
        PRICE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, step_price)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, step_contact)],
        DESC:    [MessageHandler(filters.TEXT & ~filters.COMMAND, step_desc)],
        CONFIRM: [CallbackQueryHandler(step_confirm)],
    },
    fallbacks=[CommandHandler("cancel", step_cancel)],
    per_user=True,
    per_chat=False,          # —á—Ç–æ–±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–æ–≥–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π
)
application.add_handler(conv)

# ---------------------------------------------------------------------------
# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health‚Äëcheck
# ---------------------------------------------------------------------------
app = Flask(__name__)

@app.route("/", methods=["GET", "HEAD"])
def index():
    return "ok", 200

# ---------------------------------------------------------------------------
# –ó–ê–ü–£–°–ö POLLING –í –û–¢–î–ï–õ–¨–ù–û–ú –ü–û–¢–û–ö–ï
# ---------------------------------------------------------------------------
def run_bot():
    logger.info("Starting Telegram polling‚Ä¶")
    application.run_polling(allowed_updates=Update.ALL_TYPES, close_loop=False)

def activate_bot():
    threading.Thread(target=run_bot, daemon=True).start()

# Flask 3: before_serving, Flask 2: before_first_request
if hasattr(app, "before_serving"):
    app.before_serving(activate_bot)
else:
    app.before_first_request(activate_bot)

# ---------------------------------------------------------------------------
# –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö (python bot.py)
# ---------------------------------------------------------------------------
if __name__ == "__main__":
    run_bot()  # —Å–Ω–∞—á–∞–ª–∞ Telegram
    app.run(host="0.0.0.0", port=PORT, use_reloader=False)